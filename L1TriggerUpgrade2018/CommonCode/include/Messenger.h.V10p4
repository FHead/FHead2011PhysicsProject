#ifndef MESSENGER_V10p4_21232
#define MESSENGER_V10p4_21232

#include <iostream>
#include <vector>
using namespace std;

#include "TFile.h"
#include "TTree.h"

#include "Code/TauHelperFunctions3.h"

#include "L1AnalysisCSCTFDataFormat.h"
#include "L1AnalysisL1MenuDataFormat.h"
#include "L1AnalysisCaloTPDataFormat.h"
#include "L1AnalysisRCTDataFormat.h"
#include "L1AnalysisDTTFDataFormat.h"
#include "L1AnalysisRecoClusterDataFormat.h"
#include "L1AnalysisEventDataFormat.h"
#include "L1AnalysisRecoJetDataFormat.h"
#include "L1AnalysisGCTDataFormat.h"
#include "L1AnalysisRecoMetDataFormat.h"
#include "L1AnalysisGMTDataFormat.h"
#include "L1AnalysisRecoMuonDataFormat.h"
#include "L1AnalysisGTDataFormat.h"
#include "L1AnalysisRecoTrackDataFormat.h"
#include "L1AnalysisGeneratorDataFormat.h"
#include "L1AnalysisRecoVertexDataFormat.h"
#include "L1AnalysisL1ExtraDataFormat.h"
#include "L1AnalysisSimulationDataFormat.h"
#include "L1AnalysisL1ExtraUpgradeDataFormat.h"
#include "L1AnalysisPhaseIIDataFormatV10p4.h"

class GenericObject;
class L1NTupleMessenger;
class L1MenuTreeMessenger;
class L1ExtraTreeMessenger;
class L1EmulatorMessenger;
class L1EmulatorExtraMessenger;
class L1ExtraUpgradeTreeMessenger;
class L1PhaseIITreeV10p4Messenger;
class L1GenMessenger;

class GenericObject
{
public:
   FourVector P;
   int Bx;
   double Iso;
   double VZ;
   double PET;
   int ID;
   int Qual;
   double Type;
   int Flag;
   int Charge;
   double DXY;
public:
   GenericObject()
      : P(-1, 0, 0, 0), Bx(-999), Iso(-1), VZ(-1), PET(-1), ID(-1), Qual(-1), Type(-1), Flag(-1), Charge(-100)
   {
   }
   GenericObject(FourVector p)
      : P(p), Bx(-999), Iso(-1), VZ(-1), PET(-1), ID(-1), Qual(-1), Type(-1), Flag(-1), Charge(-100)
   {
   }
};

class L1NTupleMessenger
{
public:
   TTree *Tree;
public:
   L1Analysis::L1AnalysisEventDataFormat *Event;
   L1Analysis::L1AnalysisGCTDataFormat *GCT;
   L1Analysis::L1AnalysisGeneratorDataFormat *Generator;
   L1Analysis::L1AnalysisSimulationDataFormat *Simulation;
   L1Analysis::L1AnalysisGMTDataFormat *GMT;
   L1Analysis::L1AnalysisGTDataFormat *GT;
   L1Analysis::L1AnalysisRCTDataFormat *RCT;
   L1Analysis::L1AnalysisDTTFDataFormat *DTTF;
   L1Analysis::L1AnalysisCaloTPDataFormat *CALO;
public:
   // Derived stuff
   vector<FourVector> GenP;
   vector<int> GenID;
   vector<int> GenStatus;
public:
   L1NTupleMessenger(TFile &File, string TreeName = "L1NtupleProducer/L1Tree");
   ~L1NTupleMessenger();
   void SetBranchAddress();
   bool GetEntry(int Entry);
};

class L1MenuTreeMessenger
{
};

class L1ExtraTreeMessenger
{
};

class L1EmulatorMessenger
{
};

class L1EmulatorExtraMessenger
{
};

class L1ExtraUpgradeTreeMessenger
{
public:
   TTree *Tree;
public:
   L1Analysis::L1AnalysisL1ExtraUpgradeDataFormat *L1ExtraUpgrade;
public:
   vector<GenericObject> EG;
   vector<GenericObject> IsoEG;
   vector<GenericObject> TkEG;
   vector<GenericObject> TkEG2;
   vector<GenericObject> TkIsoEG;
   vector<GenericObject> TkEM;
   vector<GenericObject> Tau;
   vector<GenericObject> IsoTau;
   vector<GenericObject> TkTau;
   vector<GenericObject> Jet;
   vector<GenericObject> TkJet;
   vector<GenericObject> FwdJet;
   vector<GenericObject> Muon;
   vector<GenericObject> TkMuon;
   vector<GenericObject> MET;
   vector<GenericObject> TkMET;
   vector<GenericObject> MHT;
   vector<GenericObject> TkMHT;
public:
   L1ExtraUpgradeTreeMessenger(TFile &File, string TreeName = "L1ExtraUpgradeTreeProducer/L1ExtraUpgradeTree");
   ~L1ExtraUpgradeTreeMessenger();
   void SetBranchAddress();
   bool GetEntry(int Entry);
   void FillObject(vector<GenericObject> &V, int N,
      vector<double> *ET, vector<double> *Eta, vector<double> *Phi, vector<int> *Bx,
      vector<double> *Iso, vector<double> *VZ, vector<double> *PET);
   void FillObject(vector<GenericObject> &V, int N,
      vector<double> *ET, vector<double> *Eta, vector<double> *Phi, vector<double> *Bx,
      vector<double> *Iso, vector<double> *VZ, vector<double> *PET);
};

class L1PhaseIITreeV10p4Messenger
{
public:
   TTree *Tree;
public:
   L1Analysis::L1AnalysisPhaseIIDataFormat *L1PhaseII;
public:   // Collections from the trees
   vector<GenericObject> CaloTau;
   vector<GenericObject> CaloJet;
   vector<GenericObject> PFPhase1Jet;
   vector<GenericObject> PFPhase1HT;
   vector<GenericObject> PFPhase1MHT;
   vector<GenericObject> CaloJetHTDefault;
   vector<GenericObject> CaloJetHT;
   vector<GenericObject> CaloJetMHT;
   vector<GenericObject> GlobalMuon;
   vector<GenericObject> StandaloneMuon;
   vector<GenericObject> StandaloneDisplacedMuon;
   vector<GenericObject> EG;
   vector<GenericObject> EGTrackID;
   vector<GenericObject> TkElectron;
   vector<GenericObject> TkElectronTrackID;
   vector<GenericObject> TkElectronV2;
   vector<GenericObject> TkElectronV2TrackID;
   vector<GenericObject> TkPhoton;
   vector<GenericObject> TkPhotonTrackID;
   vector<GenericObject> TkPhotonPVTrackID;
   vector<GenericObject> TkTau;
   vector<GenericObject> CaloTkTau;
   vector<GenericObject> TkEGTau;
   vector<GenericObject> TrackerJet;
   vector<GenericObject> TkCaloJet;
   vector<GenericObject> TkGlbMuon;
   vector<GenericObject> TkMuon;
   vector<GenericObject> TkMuonStub;
   vector<GenericObject> TkHSCP;
   vector<GenericObject> TrackerMET;
   vector<GenericObject> TrackerMHT;
   vector<GenericObject> TrackerHT;
   vector<GenericObject> PuppiJet;
   vector<GenericObject> PuppiMET;
   vector<GenericObject> PuppiMHT;
   vector<GenericObject> PuppiHT;
   vector<GenericObject> PFMuon;
   vector<GenericObject> PFCand;
   vector<GenericObject> PFTau;
   vector<GenericObject> NNTau;
   vector<GenericObject> NNTauLoose;
   vector<GenericObject> NNPFTau;
   vector<GenericObject> NNPFTauLoose;
   vector<GenericObject> HPSTau;
   vector<GenericObject> TkBsCand;
public:
   L1PhaseIITreeV10p4Messenger(TFile &File, string TreeName = "l1PhaseIITree/L1PhaseIITree");
   ~L1PhaseIITreeV10p4Messenger();
   void SetBranchAddress();
   bool GetEntry(int Entry);
   vector<double> GetRegionFromEta(vector<double> &Eta);
   string Version() { return "V10p4"; }
   template<class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12>
      void FillObject(vector<GenericObject> &V, int N,
      vector<T1> *ET, vector<T2> *Eta, vector<T3> *Phi,
      vector<T4> *Bx, vector<T5> *Iso, vector<T6> *VZ, vector<T7> *PET,
      vector<T8> *Qual, vector<T9> *Type, vector<T10> *Flag, vector<T11> *Charge,
      vector<T12> *DXY)
   {
      V.clear();

      for(int i = 0; i < N; i++)
      {
         GenericObject O;

         double TempET  = (ET != NULL  && ET->size() > i)  ? (*ET)[i]  : -1;
         double TempEta = (Eta != NULL && Eta->size() > i) ? (*Eta)[i] : -1;
         double TempPhi = (Phi != NULL && Phi->size() > i) ? (*Phi)[i] : -1;

         O.P.SetPtEtaPhi(TempET, TempEta, TempPhi);
         O.Bx     = (Bx != NULL     && Bx->size() > i)     ? (*Bx)[i]     : -1;
         O.Iso    = (Iso != NULL    && Iso->size() > i)    ? (*Iso)[i]    : -1;
         O.VZ     = (VZ != NULL     && VZ->size() > i)     ? (*VZ)[i]     : -1;
         O.PET    = (PET != NULL    && PET->size() > i)    ? (*PET)[i]    : -1;
         O.Qual   = (Qual != NULL   && Qual->size() > i)   ? (*Qual)[i]   : -1;
         O.Type   = (Type != NULL   && Type->size() > i)   ? (*Type)[i]   : -1;
         O.Flag   = (Flag != NULL   && Flag->size() > i)   ? (*Flag)[i]   : 1;
         O.Charge = (Charge != NULL && Charge->size() > i) ? (*Charge)[i] : 0;
         O.DXY    = (DXY != NULL    && DXY->size() > i)    ? (*DXY)[i]    : -1;

         V.push_back(O);
      }
   }
};

class L1GenMessenger
{
public:
   TTree *Tree;
public:
   L1Analysis::L1AnalysisGeneratorDataFormat *Generator;
public:
   // Derived stuff
   vector<FourVector> GenP;
   vector<int> GenID;
   vector<int> GenStatus;
   vector<int> GenCharge;
   vector<int> GenParent;
   vector<vector<int>> GenDaughter;
   vector<FourVector> GenJet;
   vector<double> GenDxy;
   vector<double> GenLxy;
   FourVector GenMETTrue;
   FourVector GenMETCalo;
public:
   L1GenMessenger(TFile &File, string TreeName = "l1GeneratorTree/L1GenTree");
   ~L1GenMessenger();
   void SetBranchAddress();
   bool GetEntry(int Entry);
};


#endif










