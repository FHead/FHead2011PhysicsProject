#include "Messenger.h"

L1NTupleMessenger::L1NTupleMessenger(TFile &File, string TreeName)
{
   Tree = (TTree *)File.Get(TreeName.c_str());
   
   Event = NULL;
   GCT = NULL;
   Generator = NULL;
   Simulation = NULL;
   GMT = NULL;
   GT = NULL;
   RCT = NULL;
   DTTF = NULL;
   CALO = NULL;

   SetBranchAddress();
}

L1NTupleMessenger::~L1NTupleMessenger()
{
}

void L1NTupleMessenger::SetBranchAddress()
{
   if(Tree == NULL)
      return;

   Tree->SetBranchAddress("Event", &Event);
   Tree->SetBranchAddress("GCT", &GCT);
   Tree->SetBranchAddress("Generator", &Generator);
   Tree->SetBranchAddress("Simulation", &Simulation);
   Tree->SetBranchAddress("GMT", &GMT);
   Tree->SetBranchAddress("GT", &GT);
   Tree->SetBranchAddress("RCT", &RCT);
   Tree->SetBranchAddress("DTTF", &DTTF);
   Tree->SetBranchAddress("CALO", &CALO);
}

bool L1NTupleMessenger::GetEntry(int Entry)
{
   if(Tree == NULL)
      return false;

   Tree->GetEntry(Entry);

   GenP.clear();
   GenID.clear();
   GenStatus.clear();

   if(Generator != NULL)
   {
      for(int i = 0; i < (int)Generator->partId.size(); i++)
      {
         FourVector P;
         P.SetPtEtaPhi(Generator->partPt[i], Generator->partEta[i], Generator->partPhi[i]);
         P[0] = Generator->partE[i];
         GenP.push_back(P);

         GenID.push_back(Generator->partId[i]);

         GenStatus.push_back(Generator->partStat[i]);
      }
   }

   return true;
}

L1ExtraUpgradeTreeMessenger::L1ExtraUpgradeTreeMessenger(TFile &File, string TreeName)
{
   Tree = (TTree *)File.Get(TreeName.c_str());

   L1ExtraUpgrade = NULL;

   SetBranchAddress();
}

L1ExtraUpgradeTreeMessenger::~L1ExtraUpgradeTreeMessenger()
{
}
   
void L1ExtraUpgradeTreeMessenger::SetBranchAddress()
{
   if(Tree == NULL)
      return;

   Tree->SetBranchAddress("L1ExtraUpgrade", &L1ExtraUpgrade);
}

bool L1ExtraUpgradeTreeMessenger::GetEntry(int Entry)
{
   if(Tree == NULL)
      return false;

   Tree->GetEntry(Entry);

   vector<double> D0;
   vector<int> I0;

   FillObject(EG, L1ExtraUpgrade->nEG, &L1ExtraUpgrade->egEt, &L1ExtraUpgrade->egEta, &L1ExtraUpgrade->egPhi, &L1ExtraUpgrade->egBx, &D0, &D0, &D0);
   FillObject(IsoEG, L1ExtraUpgrade->nIsoEG, &L1ExtraUpgrade->isoEGEt, &L1ExtraUpgrade->isoEGEta, &L1ExtraUpgrade->isoEGPhi, &L1ExtraUpgrade->isoEGBx, &D0, &D0, &D0);
   FillObject(TkEG, L1ExtraUpgrade->nTkEG, &L1ExtraUpgrade->tkEGEt, &L1ExtraUpgrade->tkEGEta, &L1ExtraUpgrade->tkEGPhi, &L1ExtraUpgrade->tkEGBx, &L1ExtraUpgrade->tkEGTrkIso, &L1ExtraUpgrade->tkEGzVtx, &D0);
   FillObject(TkEG2, L1ExtraUpgrade->nTkEG2, &L1ExtraUpgrade->tkEG2Et, &L1ExtraUpgrade->tkEG2Eta, &L1ExtraUpgrade->tkEG2Phi, &L1ExtraUpgrade->tkEG2Bx, &L1ExtraUpgrade->tkEG2TrkIso, &L1ExtraUpgrade->tkEG2zVtx, &D0);
   FillObject(TkIsoEG, L1ExtraUpgrade->nTkIsoEG, &L1ExtraUpgrade->tkIsoEGEt, &L1ExtraUpgrade->tkIsoEGEta, &L1ExtraUpgrade->tkIsoEGPhi, &L1ExtraUpgrade->tkIsoEGBx, &L1ExtraUpgrade->tkIsoEGTrkIso, &L1ExtraUpgrade->tkIsoEGzVtx, &D0);
   FillObject(TkEM, L1ExtraUpgrade->nTkEM, &L1ExtraUpgrade->tkEMEt, &L1ExtraUpgrade->tkEMEta, &L1ExtraUpgrade->tkEMPhi, &L1ExtraUpgrade->tkEMBx, &L1ExtraUpgrade->tkEMTrkIso, &D0, &D0);
   FillObject(Tau, L1ExtraUpgrade->nTau, &L1ExtraUpgrade->tauEt, &L1ExtraUpgrade->tauEta, &L1ExtraUpgrade->tauPhi, &L1ExtraUpgrade->tauBx, &D0, &D0, &D0);
   FillObject(IsoTau, L1ExtraUpgrade->nIsoTau, &L1ExtraUpgrade->isoTauEt, &L1ExtraUpgrade->isoTauEta, &L1ExtraUpgrade->isoTauPhi, &L1ExtraUpgrade->isoTauBx, &D0, &D0, &D0);
   FillObject(TkTau, L1ExtraUpgrade->nTkTau, &L1ExtraUpgrade->tkTauEt, &L1ExtraUpgrade->tkTauEta, &L1ExtraUpgrade->tkTauPhi, &L1ExtraUpgrade->tkTauBx, &L1ExtraUpgrade->tkTauTrkIso, &L1ExtraUpgrade->tkTauzVtx, &D0);
   FillObject(Jet, L1ExtraUpgrade->nJets, &L1ExtraUpgrade->jetEt, &L1ExtraUpgrade->jetEta, &L1ExtraUpgrade->jetPhi, &L1ExtraUpgrade->jetBx, &D0, &D0, &D0);
   FillObject(TkJet, L1ExtraUpgrade->nTkJets, &L1ExtraUpgrade->tkJetEt, &L1ExtraUpgrade->tkJetEta, &L1ExtraUpgrade->tkJetPhi, &L1ExtraUpgrade->tkJetBx, &D0, &L1ExtraUpgrade->tkJetzVtx, &D0);
   FillObject(FwdJet, L1ExtraUpgrade->nFwdJets, &L1ExtraUpgrade->fwdJetEt, &L1ExtraUpgrade->fwdJetEta, &L1ExtraUpgrade->fwdJetPhi, &L1ExtraUpgrade->fwdJetBx, &D0, &D0, &D0);

   FillObject(Muon, L1ExtraUpgrade->nMuons, &L1ExtraUpgrade->muonEt, &L1ExtraUpgrade->muonEta, &L1ExtraUpgrade->muonPhi, &L1ExtraUpgrade->muonBx, &D0, &D0, &D0);
   // vector<int>     muonChg;
   // vector<unsigned int> muonIso;
   // vector<unsigned int> muonFwd;
   // vector<unsigned int> muonMip;
   // vector<unsigned int> muonRPC;
   // vector<int>     muonQuality;
   
   FillObject(TkMuon, L1ExtraUpgrade->nTkMuons, &L1ExtraUpgrade->tkMuonEt, &L1ExtraUpgrade->tkMuonEta, &L1ExtraUpgrade->tkMuonPhi, &L1ExtraUpgrade->tkMuonBx, &L1ExtraUpgrade->tkMuonTrkIso, &L1ExtraUpgrade->tkMuonzVtx, &D0);
   // vector<int>     tkMuonChg;
   // vector<unsigned int> tkMuonIso;
   // vector<unsigned int> tkMuonFwd;
   // vector<unsigned int> tkMuonMip;
   // vector<unsigned int> tkMuonRPC;
   // vector<unsigned int> tkMuonQuality;

   FillObject(MET, L1ExtraUpgrade->nMet, &L1ExtraUpgrade->met, &D0, &L1ExtraUpgrade->metPhi, &L1ExtraUpgrade->metBx, &D0, &D0, &L1ExtraUpgrade->et);
   FillObject(TkMET, L1ExtraUpgrade->nTkMet, &L1ExtraUpgrade->tkMet, &D0, &L1ExtraUpgrade->tkMetPhi, &L1ExtraUpgrade->tkMetBx, &D0, &D0, &L1ExtraUpgrade->tkEt);
   FillObject(MHT, L1ExtraUpgrade->nMht, &L1ExtraUpgrade->mht, &D0, &L1ExtraUpgrade->mhtPhi, &L1ExtraUpgrade->mhtBx, &D0, &D0, &L1ExtraUpgrade->et);
   FillObject(TkMHT, L1ExtraUpgrade->nTkMht, &L1ExtraUpgrade->tkMht, &D0, &L1ExtraUpgrade->tkMhtPhi, &L1ExtraUpgrade->tkMhtBx, &D0, &D0, &L1ExtraUpgrade->tkEt);

   return true;
}

void L1ExtraUpgradeTreeMessenger::FillObject(vector<GenericObject> &V, int N,
   vector<double> *ET, vector<double> *Eta, vector<double> *Phi, vector<int> *Bx,
   vector<double> *Iso, vector<double> *VZ, vector<double> *PET)
{
   V.clear();

   for(int i = 0; i < N; i++)
   {
      GenericObject O;

      double TempET = (ET->size() > i) ? (*ET)[i] : -1;
      double TempEta = (Eta->size() > i) ? (*Eta)[i] : -1;
      double TempPhi = (Phi->size() > i) ? (*Phi)[i] : -1;

      O.P.SetPtEtaPhi(TempET, TempEta, TempPhi);
      O.Bx = (Bx->size() > i) ? (*Bx)[i] : -1;
      O.Iso = (Iso->size() > i) ? (*Iso)[i] : -1;
      O.VZ = (VZ->size() > i) ? (*VZ)[i] : -1;
      O.PET = (PET->size() > i) ? (*PET)[i] : -1;

      V.push_back(O);
   }
}

void L1ExtraUpgradeTreeMessenger::FillObject(vector<GenericObject> &V, int N,
   vector<double> *ET, vector<double> *Eta, vector<double> *Phi, vector<double> *Bx,
   vector<double> *Iso, vector<double> *VZ, vector<double> *PET)
{
   V.clear();

   for(int i = 0; i < N; i++)
   {
      GenericObject O;

      double TempET = (ET->size() > i) ? (*ET)[i] : -1;
      double TempEta = (Eta->size() > i) ? (*Eta)[i] : -1;
      double TempPhi = (Phi->size() > i) ? (*Phi)[i] : -1;
      
      O.P.SetPtEtaPhi(TempET, TempEta, TempPhi);
      O.Bx = (Bx->size() > i) ? (*Bx)[i] : -1;
      O.Iso = (Iso->size() > i) ? (*Iso)[i] : -1;
      O.VZ = (VZ->size() > i) ? (*VZ)[i] : -1;
      O.PET = (PET->size() > i) ? (*PET)[i] : -1;

      V.push_back(O);
   }
}
L1PhaseIITreeV1hMessenger::L1PhaseIITreeV1hMessenger(TFile &File, string TreeName)
{
   Tree = (TTree *)File.Get(TreeName.c_str());

   L1PhaseII = NULL;

   SetBranchAddress();
}

L1PhaseIITreeV1hMessenger::~L1PhaseIITreeV1hMessenger()
{
}
   
void L1PhaseIITreeV1hMessenger::SetBranchAddress()
{
   if(Tree == NULL)
      return;

   Tree->SetBranchAddress("L1PhaseII", &L1PhaseII);
}

bool L1PhaseIITreeV1hMessenger::GetEntry(int Entry)
{
   if(Tree == NULL)
      return false;

   Tree->GetEntry(Entry);

   L1Analysis::L1AnalysisPhaseIIDataFormat *P = L1PhaseII;

   vector<double> D0;
      
   // Tau: IEt, IEta, IPhi, TowerIPhi, TowerIEta, RawEt, IsoEt, NTT, HasEM, IsMErged
   FillObject(Tau, P->nTaus, &P->tauEt, &P->tauEta, &P->tauPhi, &P->tauBx, &P->tauIso, &D0, &D0, &P->tauHwQual);

   // Jet: IEt, IEta, IPhi, TowerIPhi, TowerIEta, RawEt, SeedEt, PUEt, PUDonutEt0-3
   FillObject(Jet, P->nJets, &P->jetEt, &P->jetEta, &P->jetPhi, &P->jetBx, &D0, &D0, &D0, &D0);

   // Muon: EtaAtVtx, PhiAtVtx, IEt, IEta, IPhi, IEtaAtVtx, IPhiAtVtx, IDEta, IDPhi, Chg, TfMuonIdx
   FillObject(Muon, P->nMuons, &P->muonEt, &P->muonEta, &P->muonPhi, &P->muonBx, &P->muonIso, &D0, &D0, &P->muonQual);

   // MuonKF: Chg
   FillObject(MuonKF, P->nMuonsKF, &P->muonKFEt, &P->muonKFEta, &P->muonKFPhi, &P->muonKFBx, &D0, &D0, &D0, &P->muonKFQual);

   // Sum: Type, IEt, IPhi
   FillObject(Sum, P->nSums, &P->sumEt, &D0, &P->sumPhi, &P->sumBx, &D0, &D0, &D0, &D0);

   // EG
   FillObject(EG, P->nEG, &P->EGEt, &P->EGEta, &P->EGPhi, &P->EGBx, &P->EGIso, &P->EGzVtx, &D0, &P->EGHwQual);

   // TkEG
   FillObject(TkEG, P->nTkEG, &P->tkEGEt, &P->tkEGEta, &P->tkEGPhi, &P->tkEGBx, &P->tkEGTrkIso, &P->tkEGzVtx, &D0, &P->tkEGHwQual);

   // TkEGLoose
   FillObject(TkEGLoose, P->ntkEGLoose, &P->tkEGLooseEt, &P->tkEGLooseEta, &P->tkEGLoosePhi, &P->tkEGLooseBx, &P->tkEGLooseTrkIso, &P->tkEGLoosezVtx, &D0, &P->tkEGLooseHwQual);

   // TkEM
   FillObject(TkEM, P->nTkEM, &P->tkEMEt, &P->tkEMEta, &P->tkEMPhi, &P->tkEMBx, &P->tkEMTrkIso, &P->tkEMzVtx, &D0, &P->tkEMHwQual);

   // TkTau
   FillObject(TkTau, P->nTkTau, &P->tkTauEt, &P->tkTauEta, &P->tkTauPhi, &P->tkTauBx, &P->tkTauTrkIso, &P->tkTauzVtx, &D0, &D0);
   
   // TrackerJet
   FillObject(TrackerJet, P->nTrackerJets, &P->trackerJetEt, &P->trackerJetEta, &P->trackerJetPhi, &P->trackerJetBx, &D0, &P->trackerJetzVtx, &D0, &D0);

   // TkCaloJet
   FillObject(TkCaloJet, P->nTkCaloJets, &P->tkCaloJetEt, &P->tkCaloJetEta, &P->tkCaloJetPhi, &P->tkCaloJetBx, &D0, &P->tkCaloJetzVtx, &D0, &D0);
   
   // TkGlbMuon: Chg, Fwd, Mip, RPC, Quality, Iso
   FillObject(TkGlbMuon, P->nTkGlbMuons, &P->tkGlbMuonEt, &P->tkGlbMuonEta, &P->tkGlbMuonPhi, &P->tkGlbMuonBx, &P->tkGlbMuonTrkIso, &P->tkGlbMuonzVtx, &D0, &P->tkGlbMuonQuality);

   // TkMuon: Chg, Fwd, Mip, RPC, Quality, Iso
   FillObject(TkMuon, P->nTkMuons, &P->tkMuonEt, &P->tkMuonEta, &P->tkMuonPhi, &P->tkMuonBx, &P->tkMuonTrkIso, &P->tkMuonzVtx, &D0, &P->tkMuonQuality);

   // TrackerMET
   FillObject(TrackerMET, P->nTrackerMet, &P->trackerMetEt, &D0, &P->trackerMetPhi, &P->trackerMetBx, &D0, &D0, &P->trackerMetSumEt, &D0);

   // TrackerMHT
   FillObject(TrackerMHT, P->nTrackerMHT, &P->trackerMHT, &D0, &P->trackerMHTPhi, &D0, &D0, &D0, &P->trackerHT, &D0);
   
   // TrackerHT
   FillObject(TrackerHT, P->nTrackerMHT, &P->trackerHT, &D0, &D0, &D0, &D0, &D0, &P->trackerHT, &D0);
   
   // PuppiJet: EtUnCorr
   FillObject(PuppiJet, P->nPuppiJets, &P->puppiJetEt, &P->puppiJetEta, &P->puppiJetPhi, &P->puppiJetBx, &D0, &P->puppiJetzVtx, &D0, &D0);

   // PuppiMET
   vector<double> PuppiMETEt = {P->puppiMETEt};
   vector<double> PuppiMETPhi = {P->puppiMETPhi};
   FillObject(PuppiMET, 1, &PuppiMETEt, &D0, &PuppiMETPhi, &D0, &D0, &D0, &D0, &D0);

   // PuppiMHT
   FillObject(PuppiMHT, P->nPuppiMHT, &P->puppiMHTEt, &D0, &P->puppiMHTPhi, &D0, &D0, &D0, &P->puppiHT, &D0);

   // PuppiHT
   FillObject(PuppiHT, P->nPuppiMHT, &P->puppiHT, &D0, &D0, &D0, &D0, &D0, &P->puppiHT, &D0);
   
   return true;
}

L1GenMessenger::L1GenMessenger(TFile &File, string TreeName)
{
   Tree = (TTree *)File.Get(TreeName.c_str());
   
   Generator = NULL;

   SetBranchAddress();
}

L1GenMessenger::~L1GenMessenger()
{
}

void L1GenMessenger::SetBranchAddress()
{
   if(Tree == NULL)
      return;

   Tree->SetBranchAddress("Generator", &Generator);
}

bool L1GenMessenger::GetEntry(int Entry)
{
   if(Tree == NULL)
      return false;

   Tree->GetEntry(Entry);

   GenP.clear();
   GenID.clear();
   GenStatus.clear();
   GenCharge.clear();
   GenJet.clear();
   GenMETTrue = FourVector(0, 0, 0, 0);
   GenMETCalo = FourVector(0, 0, 0, 0);

   if(Generator != NULL)
   {
      for(int i = 0; i < (int)Generator->partId.size(); i++)
      {
         FourVector P;
         P.SetPtEtaPhi(Generator->partPt[i], Generator->partEta[i], Generator->partPhi[i]);
         P[0] = Generator->partE[i];
         GenP.push_back(P);

         GenID.push_back(Generator->partId[i]);

         GenStatus.push_back(Generator->partStat[i]);

         GenCharge.push_back(Generator->partCh[i]);
      }

      for(int i = 0; i < Generator->nJet; i++)
      {
         FourVector J;
         double PT =   ((Generator->jetPt.size() > i) ?  Generator->jetPt[i] :  0);
         double Eta =  ((Generator->jetEta.size() > i) ? Generator->jetEta[i] : 0);
         double Phi =  ((Generator->jetPhi.size() > i) ? Generator->jetPhi[i] : 0);
         double Mass = ((Generator->jetM.size() > i) ?   Generator->jetM[i] :   0);
         J.SetPtEtaPhiMass(PT, Eta, Phi, Mass);
         GenJet.push_back(J);
      }

      GenMETTrue.SetPtEtaPhi(Generator->genMetTrue, 0, 0);
      GenMETCalo.SetPtEtaPhi(Generator->genMetCalo, 0, 0);
   }

   return true;
}


